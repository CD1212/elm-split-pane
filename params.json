{
  "name": "Elm Split Pane",
  "tagline": "Split pane for Elm",
  "body": "# Split Pane\r\n\r\nA split pane for Elm.\r\n\r\nEmbed two views beside each other with a resizable splitter in between.\r\n\r\n## Usage Rules\r\n\r\n  - Always put `SplitPane.State` in your model.\r\n  - Never put _any_ `Config` in your model.\r\n  - Don't forget to register subscriptions for dragging to work.\r\n  - To control the pane's size place the pane inside a container and give the container a size\r\n\r\nDesign inspired by [elm-sortable-table](https://github.com/evancz/elm-sortable-table/).\r\n\r\nRead about why these usage rules are good rules [here](https://github.com/evancz/elm-sortable-table/tree/1.0.0#usage-rules).\r\n\r\n## Installation\r\n\r\n```\r\nelm package install doodledood/elm-split-pane\r\n```\r\n\r\n## Examples\r\n\r\n1. [Simple](https://doodledood.github.io/elm-split-pane/simple.html)\r\n2. [Nested](https://doodledood.github.io/elm-split-pane/nested.html)\r\n3. [Custom splitter](https://doodledood.github.io/elm-split-pane/customSplitter.html)\r\n4. [Adjusting to resizes](https://doodledood.github.io/elm-split-pane/adjustToResize.html)\r\n\r\n[Examples code](https://github.com/doodledood/elm-split-pane/tree/master/examples)\r\n\r\n## Basic Usage\r\n\r\nUse it just like any other TEA component.\r\n\r\n```elm\r\n\r\nmodule Main exposing (..)\r\n\r\nimport Html exposing (..)\r\nimport Html.App exposing (program)\r\nimport Html.Attributes exposing (src, style)\r\nimport SplitPane exposing (Orientation(..), ViewConfig, createViewConfig)\r\n\r\n\r\nmain : Program Never\r\nmain =\r\n    program\r\n        { update = update\r\n        , init = init\r\n        , subscriptions = subscriptions\r\n        , view = view\r\n        }\r\n\r\n\r\n\r\n-- MODEL\r\n\r\n\r\ntype alias Model =\r\n    { pane : SplitPane.State\r\n    }\r\n\r\n\r\ntype Msg\r\n    = PaneMsg SplitPane.Msg\r\n\r\n\r\n\r\n-- INIT\r\n\r\n\r\ninit : ( Model, Cmd a )\r\ninit =\r\n    ( { pane = SplitPane.init Horizontal\r\n      }\r\n    , Cmd.none\r\n    )\r\n\r\n\r\n\r\n-- UPDATE\r\n\r\n\r\nupdate : Msg -> Model -> ( Model, Cmd a )\r\nupdate msg model =\r\n    case msg of\r\n        PaneMsg paneMsg ->\r\n            ( { model | pane = SplitPane.update paneMsg model.pane }, Cmd.none )\r\n\r\n\r\n\r\n-- VIEW\r\n\r\n\r\nview : Model -> Html Msg\r\nview model =\r\n    div\r\n        [ style\r\n            [ ( \"width\", \"800px\" )\r\n            , ( \"height\", \"600px\" )\r\n            ]\r\n        ]\r\n        [ SplitPane.view viewConfig firstView secondView model.pane ]\r\n\r\n\r\nviewConfig : ViewConfig Msg\r\nviewConfig =\r\n    createViewConfig\r\n        { toMsg = PaneMsg\r\n        , customSplitter = Nothing\r\n        }\r\n\r\n\r\nfirstView : Html a\r\nfirstView =\r\n    img [ src \"http://4.bp.blogspot.com/-s3sIvuCfg4o/VP-82RkCOGI/AAAAAAAALSY/509obByLvNw/s1600/baby-cat-wallpaper.jpg\" ] []\r\n\r\n\r\nsecondView : Html a\r\nsecondView =\r\n    img [ src \"http://2.bp.blogspot.com/-pATX0YgNSFs/VP-82AQKcuI/AAAAAAAALSU/Vet9e7Qsjjw/s1600/Cat-hd-wallpapers.jpg\" ] []\r\n\r\n\r\n\r\n-- SUBSCRIPTIONS\r\n\r\n\r\nsubscriptions : Model -> Sub Msg\r\nsubscriptions model =\r\n    Sub.map PaneMsg <| SplitPane.subscriptions model.pane\r\n\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}